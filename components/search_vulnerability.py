import requests
import vulners
import configparser

# read setting file
path = "settings/settings.conf"
config = configparser.ConfigParser()
config.read(path)


def find_circl(cpe):
    """

    :return:
    """
    global result_data
    try:
        url = "http://cve.circl.lu/api/cvefor/" + str(cpe)
        r = requests.get(url=url)
        data = r.json()
        result_data = list()
        if len(data) > 0:
            for ids in data:
                result_data.append(ids['id'])
        return result_data
    except:
        result_data = []
        return result_data


class VulnerSearch(object):

    def __init__(self, vulners_api=None):
        """

        :param vulners_api:
        """
        self.vulners_api = vulners_api

    def search_vulners(self, product_version, cpe):
        """

        :param cpe:
        :param product_version:
        :return:
        """
        vulners_api = vulners.Vulners(api_key=self.vulners_api)
        try:
            cpe_results = vulners_api.cpeVulnerabilities(str(cpe))
            cpe_exploit_list = cpe_results.get('exploit')
            cpe_vulnerabilities_list = [cpe_results.get(key) for key in cpe_results if
                                        key not in ['info', 'blog', 'bugbounty']]
        except ValueError:
            cpe_vulnerabilities_list = vulners_api.searchExploit(product_version, limit=25)
        return cpe_vulnerabilities_list

    def download_data_linux(self, os, version):
        """

        :param os:
        :param version:
        :return:
        """
        vulners_api = vulners.Vulners(api_key=self.vulners_api)
        linux_vulnerabilities_data = vulners_api.distributive(os, version)
        return linux_vulnerabilities_data
