from pprint import pprint
from app import get_config, db_vulndb, db_scanner
import json
import re
from typing import Dict
import requests
from bs4 import BeautifulSoup

# client = MongoClient()
config_json = get_config()
collection = db_vulndb['cve']
collection_info = db_scanner['vulnerability']


def find_cve(cve):
    return collection.find_one({"cve": cve})


def find_vulnerability(task):
    list_mng = []
    result_vulnerability = collection_info.find({"id": task})
    count_vulnerability = 0
    count_exploit = 0
    avg_cvss = 0.0
    result_avg_cvss = 0.0
    for vulnerability in result_vulnerability:
        list_mng.append(vulnerability)
        if vulnerability['name'] == 'publicExploits':
            count_exploit = count_exploit + 1
        count_vulnerability = count_vulnerability + 1
        if 'result' in vulnerability:
            if 'cvss' in vulnerability['result']:
                avg_cvss = avg_cvss + float(vulnerability['result']['cvss']['score'])
    if count_vulnerability != 0:
        result_avg_cvss = avg_cvss / count_vulnerability
    return list_mng, count_vulnerability, count_exploit, result_avg_cvss


def count_vulnerabity(ip):
    result_vulnerability = collection_info.find(ip)
    # count = 0
    # for i in result_vulnerability:
    #     count = count + 1
    return result_vulnerability


def parse_html(link, product) -> list:
    r = requests.get(link)
    soup = BeautifulSoup(r.text, "html.parser").find('div', id='TableWithRules')
    listing_item_main = soup.find_all('tr')
    list_result = []
    for i in listing_item_main:
        hr = i.find_all('td')
        list_array = [h.text for h in hr]
        if len(list_array) > 0 and re.search(str(product), list_array[1]):
            list_result.append(list_array[0])
    return list_result


class cve_mitre:

    def __init__(self, product, version):
        self.product = product
        self.version = version
        self.base_url = "https://cve.mitre.org/cgi-bin/cvekey.cgi?keyword="

    def search(self) -> Dict:
        try:
            product = str(self.product).split()
            line = product[0] + "+" + self.version
            line = line.replace(' ', '+')
            url = self.base_url + line
            dict_list = parse_html(link=url, product=product[0])
            return json.loads(json.dumps({'cve_mitre': dict_list}))
        except Exception as e:
            pass
